package com.dev.CaloApp.entity;

import com.fasterxml.jackson.annotation.JsonIgnore;
import jakarta.persistence.*;
import lombok.*;

import java.time.LocalDate;
import java.util.List;

@Entity
@Table(name = "users")
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class User {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Column(nullable = false, unique = true)
    private String email;

    @Column(nullable = false)
    private String password;

    private String name;
    private int age; // Tu·ªïi
    private float height; // Chi·ªÅu cao (cm)
    private float weight; // C√¢n n·∫∑ng (kg)
    private String gender; // "male" ho·∫∑c "female"
    private String goal = "LOSE_WEIGHT"; // M·ª•c ti√™u: GAIN_MUSCLE, LOSE_WEIGHT, MAINTAIN_WEIGHT

    private double dailyCalories; // L∆∞·ª£ng calo khuy·∫øn ngh·ªã m·ªói ng√†y
    private int TDEE; // T·ªïng ti√™u hao nƒÉng l∆∞·ª£ng h√†ng ng√†y
    private int BMR; // Ch·ªâ s·ªë trao ƒë·ªïi ch·∫•t c∆° b·∫£n
    private float BMI; // Ch·ªâ s·ªë kh·ªëi c∆° th·ªÉ
    private String state; //T√¨nh tr·∫°ng c√¢n n·∫∑ng d·ª±a tr√™n BMI
    private String googleId;
    private String provider;
    private String providerId;

    private LocalDate createdate = LocalDate.now();
    private float caloDeficit = 500; //calo c·∫ßn th√¢m h·ª•t h·∫±ng ng√†y
    private float firstWeight;

    @OneToMany(mappedBy = "user")
    @JsonIgnore
    private List<MealLog> mealLogs;

    // üî• T·ª± ƒë·ªông t√≠nh to√°n c√°c ch·ªâ s·ªë tr∆∞·ªõc khi l∆∞u v√†o DB
    @PrePersist
    @PreUpdate
    public void calculateMetrics() {
        caloDeficit = 500;
        goal = "LOSE_WEIGHT";
        if (height > 0 && weight > 0 && age > 0) {
            // 1Ô∏è‚É£ T√≠nh BMR
            if ("Nam".equalsIgnoreCase(gender)) {
                this.BMR = (int) (10 * weight + 6.25 * height - 5 * age + 5);
            } else if ("Nu".equalsIgnoreCase(gender)) {
                this.BMR = (int) (10 * weight + 6.25 * height - 5 * age - 161);
            } else {
                this.BMR = 0; // N·∫øu gi·ªõi t√≠nh kh√¥ng h·ª£p l·ªá
            }

            // 2Ô∏è‚É£ T√≠nh BMI
//            < 18.5	G·∫ßy
//            18.5 - 24.9	B√¨nh th∆∞·ªùng
//            25 - 29.9	Th·ª´a c√¢n
//            30 - 34.9	B√©o ph√¨ c·∫•p ƒë·ªô 1
//            35 - 39.9	B√©o ph√¨ c·∫•p ƒë·ªô 2
//            ‚â• 40	B√©o ph√¨ c·∫•p ƒë·ªô 3
            this.BMI = (float) (weight / Math.pow(height / 100, 2));
            if (BMI < 18.5){
                state = "G·∫ßy";
                goal = "GAIN_MUSCLE";
                caloDeficit = -500;
            }
            else if (BMI < 24.9){
                state = "B√¨nh th∆∞·ªùng";
                goal = "MAINTAIN_WEIGHT";
                caloDeficit = 0;
            }
            else if (BMI < 29.9) state = "Th·ª´a c√¢n";
            else if (BMI < 34.9) state = "B√©o ph√¨ c·∫•p ƒë·ªô 1";
            else if (BMI < 39.9) state = "B√©o ph√¨ c·∫•p ƒë·ªô 2";
            else if (BMI >= 40) state = "B√©o ph√¨ c·∫•p ƒë·ªô 3";


            // 3Ô∏è‚É£ T√≠nh TDEE (gi·∫£ ƒë·ªãnh m·ª©c ƒë·ªô ho·∫°t ƒë·ªông trung b√¨nh)
//            double activityLevel = 1.55; // Ho·∫°t ƒë·ªông trung b√¨nh
            this.TDEE = (int) (this.BMR * 1.375);

            // 4Ô∏è‚É£ T√≠nh dailyCalories theo m·ª•c ti√™u
            switch (goal) {
                case "LOSE_WEIGHT": // Gi·∫£m c√¢n
                this.dailyCalories = this.TDEE - 500;
                    break;
                case "GAIN_MUSCLE": // TƒÉng c√¢n
                    this.dailyCalories = this.TDEE + 500;
                    break;
                default: // Duy tr√¨ c√¢n n·∫∑ng
                    this.dailyCalories = this.TDEE;
                    break;
            }
        } else {
            // N·∫øu d·ªØ li·ªáu kh√¥ng h·ª£p l·ªá, ƒë·∫∑t gi√° tr·ªã m·∫∑c ƒë·ªãnh
            this.BMR = 0;
            this.BMI = 0;
            this.TDEE = 0;
            this.dailyCalories = 0;
        }
    }
}